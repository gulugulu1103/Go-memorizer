version: "3.8"  # 使用 Docker Compose 文件格式版本 3.8

services:
  reverse-proxy:
    # 使用官方的 Traefik v2.2 Docker 镜像作为反向代理
    image: traefik:v2.2
    command:
      - "--api.insecure=true" # 启用不安全的 API 访问（仅 HTTP），用于访问 Traefik 的仪表板
      - "--providers.docker=true" # 启用 Docker 作为 Traefik 的提供者
      - "--providers.docker.exposedbydefault=false" # 默认不暴露 Docker 服务
    ports:
      - "80:80" # 将宿主机的 80 端口映射到容器的 80 端口
      - "8080:8080" # 将宿主机的 8080 端口映射到容器的 8080 端口，用于访问 Traefik 的 Web UI
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # 挂载 Docker 套接字，以便 Traefik 监听 Docker 事件

  account:
    # 使用 Dockerfile 构建 account 服务的镜像
    build:
      context: ./account  # Dockerfile 所在目录
      target: builder  # 使用 Dockerfile 中名为 builder 的构建阶段
    image: account  # 为构建的镜像指定名称
    env_file:
      - .env.dev  # 使用 .env 文件中的环境变量
    expose:
      - "8080" # 暴露容器的 8080 端口
    labels:
      - "traefik.enable=true" # 告诉 Traefik 启用此容器的路由
      - "traefik.http.routers.account.rule=Host(`127.0.0.1`) && PathPrefix(`/api/account`)" # 定义路由规则
    environment:
      - ENV=dev  # 设置环境变量
    volumes:
      - ./account:/go/src/app  # 挂载本地的 account 目录到容器中
    command: reflex -r "\.go$$" -s -- sh -c "go run ./" # 使用 reflex 监控 Go 文件变化并重新运行应用

# 这个配置文件定义了两个服务：
# 1. Traefik 反向代理，用于路由和负载均衡。
# 2. 一个名为 account 的 Go 应用，它使用 reflex 自动编译和重启，便于开发。
